'''
Created on Dec 6, 2017

@author: bpatton
'''
class Board(object):
    def __init__(self, width=7, height=6):
        self.__width = width 
        self.__height = height
        self.__board = [[' ' for j in range(width)] for i in range(height)] 
            
    
    def __str__(self):
        A = ''
        for row in range(self.__height):
            A += '\n'
            for col in range(self.__width):
                A += '|' + self.__board[row][col]
                if col == self.__width - 1:
                    A += '|'
        label = '' 
        for i in range(self.__width):
            label += ' ' + str(i)
            
        A += '\n' + '--'*self.__width + '-' + '\n' + label
        
        return A

    def allowsMove(self, col):
        if self.__board[0][col] == ' ':
            return True
        else:
            return False
        
    def addMove(self, col, ox):
        r = 0
        while self.__board[r][col] == ' ' and r < self.__height - 1:
            r += 1
        if self.__board[r][col] == ' ':
            self.__board[r][col] = ox
        else:
            self.__board[r - 1][col] = ox
         

    def setBoard(self, moveString):
        nextCh = 'X' # start by playing 'X'
        for colString in moveString:
            col = int(colString)
            if 0 <= col <= self.width:
                self.addMove(col, nextCh)
            if nextCh == 'X': nextCh = 'O'
            else: nextCh = 'X'
    
    def delMove(self, col):
        r = 0
        while self.__board[r][col] == ' ' and r < self.__height - 1:
            r += 1
        self.__board[r][col] = ' '
        
        
    def winsFor(self, ox):
        r = 0
        c = 0
        while self.__board[r][c] != ox:
            if c != self.__width - 1:
                c += 1
            elif r != self.__height - 1:
                r +=1
                c = 0
            else:
                return False   
             
        checks = [[self.__board[r][c], self.__board[r][c + 1], self.__board[r][c + 2], self.__board[r][c + 3]], \
                  [self.__board[r][c], self.__board[r][c - 1], self.__board[r][c - 2], self.__board[r][c - 3]], \
                  [self.__board[r][c], self.__board[r + 1][c], self.__board[r + 2][c], self.__board[r + 3][c]], \
                  [self.__board[r][c], self.__board[r + 1][c + 1], self.__board[r + 2][c + 2], self.__board[r + 3][c + 3]], \
                  [self.__board[r][c], self.__board[r + 1][c - 1], self.__board[r + 2][c - 2], self.__board[r + 3][c - 3]]]     
        
        if r <= 3 and c == 3:
            if checks[0] == [ox, ox, ox, ox] or checks[1] == [ox, ox, ox, ox] or checks[2] == [ox, ox, ox, ox] or \
            checks[3] == [ox, ox, ox, ox] or checks[4] == [ox, ox, ox, ox]:
                return True
        elif r <= 3 and c < 3:
            if checks[0] == [ox, ox, ox, ox] or checks[2] == [ox, ox, ox, ox] or checks[3] == [ox, ox, ox, ox]: 
                return True
        elif r <= 3 and c > 3:
            if checks[1] == [ox, ox, ox, ox] or checks[2] == [ox, ox, ox, ox] or checks[4] == [ox, ox, ox, ox]: 
                return True
        elif r > 3 and c == 3:
            if checks[0] == [ox, ox, ox, ox] or checks[1] == [ox, ox, ox, ox]:
                return True
        elif r > 3 and c < 3:
            if checks[0] == [ox, ox, ox, ox]: 
                return True
        elif r > 3 and c > 3:
            if checks[1] == [ox, ox, ox, ox]: 
                return True
        return False
        
A = Board()
A.addMove(3, 'O')
A.addMove(3, 'X')
A.addMove(3, 'X')
A.addMove(4, 'X')
A.addMove(4, 'X')
A.addMove(4, 'X')
A.addMove(4, 'X')
print(A)
print(A.winsFor('X'))